SELECT TOP (1000) [transactions_id]
      ,[sale_date]
      ,[sale_time]
      ,[customer_id]
      ,[gender]
      ,[age]
      ,[category]
      ,[quantiy]
      ,[price_per_unit]
      ,[cogs]
      ,[total_sale]
  FROM [retail project].[dbo].[Retail_Sale]

  SELECT COUNT(*)
  FROM Retail_Sale;

SELECT *
FROM Retail_Sale
WHERE transactions_id IS NOT NULL;

--data cleaning
--check null value
SELECT *
FROM Retail_Sale
WHERE transactions_id IS NULL 
		OR
		sale_time IS NULL
		OR
		sale_date IS NULL
		OR
		customer_id IS NULL
		OR
		age IS NULL
		OR
		quantiy IS NULL
		OR
		category IS NULL 
		OR
		gender IS NULL
		OR
		price_per_unit IS NULL
		OR
		cogs IS NULL
		OR
		total_sale IS NULL;

--delete null value
DELETE FROM Retail_Sale
WHERE transactions_id IS NULL 
		OR
		sale_time IS NULL
		OR
		sale_date IS NULL
		OR
		customer_id IS NULL
		OR
		age IS NULL
		OR
		quantiy IS NULL
		OR
		category IS NULL 
		OR
		gender IS NULL
		OR
		price_per_unit IS NULL
		OR
		cogs IS NULL
		OR
		total_sale IS NULL;

--data exploration 
--how many sale we have?
SELECT COUNT(*) AS total_sale
FROM Retail_Sale;

--how many unique customer we have?
SELECT COUNT(DISTINCT customer_id) AS total_customer
  FROM Retail_Sale;

--how many category we have?
SELECT COUNT(DISTINCT category) AS total_customer
  FROM Retail_Sale;

--Data Analysis & Business Key Problems & Answer

--Q1 Write a SQL query to retrieve all columns for sales made on '2022-11-05:
SELECT *
FROM Retail_Sale
WHERE sale_date = '2022-11-05'

--Q2 Write a SQL query to retrieve all transactions where the category is 'Clothing' and the quantity sold is more than 4 in the month of Nov-2022:
SELECT *
FROM Retail_Sale
WHERE category = 'Clothing'
  AND FORMAT(sale_date, 'yyyy-MM') = '2022-11'
  AND quantiy >= 4;

--Q3 Write a SQL query to calculate the total sales (total_sale) for each category.
SELECT category, SUM(total_sale) AS net_sale, COUNT(*) AS total_order
FROM Retail_Sale
GROUP BY category;

--Q4 Write a SQL query to find the average age of customers who purchased items from the 'Beauty' category.
SELECT ROUND(AVG(age),2) AS average_age, category
FROM Retail_Sale
WHERE category = 'Beauty'
GROUP BY category;

--Q5 Write a SQL query to find all transactions where the total_sale is greater than 1000.
SELECT *
FROM Retail_Sale
WHERE total_sale > 1000;

--Q6 Write a SQL query to find the total number of transactions (transaction_id) made by each gender in each category.
SELECT category, gender, COUNT(*) AS total_transactions
FROM Retail_Sale
GROUP BY category, gender
ORDER BY category;

--Q7 Write a SQL query to calculate the average sale for each month. Find out best selling month in each year:
WITH cte AS (
SELECT 
    YEAR(sale_date) AS Year,
    MONTH(sale_date) AS Month,
    AVG(total_sale) AS avg_sale,
	RANK() OVER (PARTITION BY YEAR(sale_date) ORDER BY AVG(total_sale) DESC) AS Rank
FROM Retail_Sale
GROUP BY YEAR(sale_date), MONTH(sale_date)
)
--ORDER BY YEAR(sale_date), avg_sale DESC
SELECT year, month, avg_sale 
FROM cte
WHERE Rank = 1;

--Q8 Write a SQL query to find the top 5 customers based on the highest total sales 
SELECT TOP 5 customer_id, SUM(total_sale) AS highest_total_sale
FROM Retail_Sale
GROUP BY customer_id
ORDER BY SUM(total_sale) DESC;

--Q9 Write a SQL query to find the number of unique customers who purchased items from each category
SELECT  category, COUNT(DISTINCT customer_id) AS unique_customer
FROM Retail_Sale
GROUP BY category;

--Q10 Write a SQL query to create each shift and number of orders (Example Morning <12, Afternoon Between 12 & 17, Evening >17)
WITH hourly_sale AS (
SELECT *,
    CASE
        WHEN DATEPART(hour, sale_time) < 12 THEN 'Morning'
        WHEN DATEPART(hour, sale_time) BETWEEN 12 AND 17 THEN 'Afternoon'
        ELSE 'Evening'
    END AS shifts
FROM Retail_Sale )

select shifts, COUNT(*) AS order_total
from hourly_sale
GROUP BY shifts;

--End of Project
